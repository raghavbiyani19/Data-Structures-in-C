//BINARY TREE
//Creation of a tree
//TRAVERSAL-(PRE POST IN order).
//Counting number of nodes.
//Finding height.

#include<stdio.h>
#include<stdlib.h>
/*
             1
           /   \
          2     3
         / \
        4   5
*/
struct node{
int data;
struct node *lnext;
struct node *rnext;
};

void linkedlist();
struct node *create(struct node *, int);
void preorder(struct node *);
void postorder(struct node *);
void inorder(struct node *);
int  depth(struct node *);
int count(struct node *);

void array();
void inorderarray(int);
void preorderarray(int);
void postorderarray(int);
int deptharray(int);
int countarray(int);
int tree[100];


int main()
{
int option;
    do{
        printf("\nChoose:\n 1.Implimentation of Binary tree using LinkedList.\n 2.Implimentation of Binary tree using array\n 3.Exit\n");
        scanf("%d", &option);
     switch(option)
     {
     case 1: linkedlist();
             break;
     case 2: array();
             break;
     case 3: exit(0);
             break;
     }
    }while(option!=3);
return 0;
}


void linkedlist()
{
    struct node *root=NULL;
    int option;
    do{
        printf("\nChoose:\n 1.Creation of the Tree\n 2.Preorder Traversal\n 3.Postorder Traversal\n 4.Inorder Traversal\n 5. Depth of the tree\n 6.Total internal nodes in the tree\n 7.Exit\n");
        scanf("%d",&option);
        switch(option)
        {
        case 1: root = create(root,10);
                root->lnext = create(root,7);
                root->rnext = create(root,15);
                break;
        case 2: printf("\nPreorder traversal is:\n");
                preorder(root);
                break;
        case 3: printf("\nPostorder traversal is:\n");
                postorder(root);
                break;
        case 4: printf("\nInorder traversal is:\n");
                inorder(root);
                break;
        case 5: depth(root);
                printf("\nDepth of the tree is: %d", depth(root));
                break;
        case 6: count(root);
                printf("\nTotal number of internal nodes in the Binary tree is %d",count(root));
                break;
        case 7: exit(0);
                break;
        }
    }while(option!=7);
}

struct node *create(struct node *root, int item)
{
root = (struct node *) malloc(sizeof(struct node));
root->lnext=NULL;
root->rnext=NULL;
root->data=item;
return root;
}

void preorder(struct node *t)
{
if(t)
{
printf("%d\t", t->data);
preorder(t->lnext);
preorder(t->rnext);
}
}

void postorder(struct node *t)
{
if(t)
{
postorder(t->lnext);
postorder(t->rnext);
printf("%d\t", t->data);
}
}

void inorder(struct node *t)
{
if(t)
{
inorder(t->lnext);
printf("%d\t", t->data);
inorder(t->rnext);
}
}

int depth(struct node *t)
{
if(t==NULL)
return -1;
int ldepth = depth(t->lnext);
int rdepth = depth(t->rnext);
if(ldepth>rdepth)
return ldepth+1;
else
return rdepth+1;
}

int count(struct node *t)
{
    if (t == NULL || (t->lnext == NULL && t->rnext == NULL))
        return 0;
    // If root is Not NULL and its one of its
    // child is also not NULL
    return 1+count(t->lnext)+count(t->rnext);

}


void array()
{
int num,i,option,intcount,depth=0,j;
printf("\nEnter the number of elements in array\n");
scanf("%d",&num);
printf("\nEnter array elements\n");
for(i=0;i<num;i++)
scanf("%d",&tree[i]);
for(j=i;j<99;j++)
tree[j]=-1;
printf("Array is:\t");
for(i=0;i<num;i++)
printf("%d\t",tree[i]);
do
{
printf("\nEnter your choice:\n 1.Inorder\n 2.Preorder\n 3.Postorder\n 4.Total internal nodes in the tree\n 5.Depth of the tree\n 6.Exit\n");
scanf("%d",&option);
switch(option)
{
case 1: inorderarray(0);
        break;
case 2: preorderarray(0);
        break;
case 3: postorderarray(0);
        break;
case 4: intcount=countarray(0);
        printf("Total internal nodes in the tree = %d",intcount);
        break;
case 5: depth=deptharray(0);
        printf("Depth of the tree is %d",depth);
        break;
case 6: exit(0);
        break;
}
}while(option!=6);
}



void inorderarray(int n)
{
if(tree[n]!=-1)
{
inorderarray(n*2+1);
printf("%d\t",tree[n]);
inorderarray((n*2+2));
}
}

void preorderarray(int n)
{
if(tree[n]!=-1)
{
printf("%d\t",tree[n]);
preorderarray(n*2+1);
preorderarray(n*2+2);
}
}

void postorderarray(int n)
{
if(tree[n]!=-1)
{
postorderarray(n*2+1);
postorderarray(n*2+2);
printf("%d\t",tree[n]);
}
}

int deptharray(int n)
{
int ls,rs;
if(tree[n]== -1)
{
return -1;
}
else
{
ls=deptharray(2*n+1);
rs=deptharray(2*n+2);
if(ls>rs)
return ls+1;
else
return rs+1;
}
}

int countarray(int n)
{
if(tree[n]==-1)
return 0;
if(tree[2*n+1]==-1 && tree[2*n+2]==-1)
return 0;
else
return (countarray(2*n+1) + countarray(2*n+2) + 1);
}
